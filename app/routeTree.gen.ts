/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthedIndexImport } from './routes/_authed/index'
import { Route as VerifyOtpEmailImport } from './routes/verify-otp.$email'
import { Route as AuthedJoinTeamInviteCodeImport } from './routes/_authed/join-team.$inviteCode'
import { Route as AuthedTTeamIdPProjectIdImport } from './routes/_authed/t.$teamId.p.$projectId'
import { Route as AuthedTTeamIdPProjectIdTeamSettingsImport } from './routes/_authed/t.$teamId.p.$projectId.team-settings'
import { Route as AuthedTTeamIdPProjectIdSettingsImport } from './routes/_authed/t.$teamId.p.$projectId.settings'
import { Route as AuthedTTeamIdPProjectIdMembersImport } from './routes/_authed/t.$teamId.p.$projectId.members'
import { Route as AuthedTTeamIdPProjectIdLogsImport } from './routes/_authed/t.$teamId.p.$projectId.logs'
import { Route as AuthedTTeamIdPProjectIdDomainsImport } from './routes/_authed/t.$teamId.p.$projectId.domains'
import { Route as AuthedTTeamIdPProjectIdBillingImport } from './routes/_authed/t.$teamId.p.$projectId.billing'
import { Route as AuthedTTeamIdPProjectIdApiTokensImport } from './routes/_authed/t.$teamId.p.$projectId.api-tokens'
import { Route as AuthedTTeamIdPProjectIdTemplatesIndexImport } from './routes/_authed/t.$teamId.p.$projectId.templates.index'
import { Route as AuthedTTeamIdPProjectIdTemplatesNewImport } from './routes/_authed/t.$teamId.p.$projectId.templates.new'
import { Route as AuthedTTeamIdPProjectIdTemplatesSlugImport } from './routes/_authed/t.$teamId.p.$projectId.templates.$slug'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedIndexRoute = AuthedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const VerifyOtpEmailRoute = VerifyOtpEmailImport.update({
  id: '/verify-otp/$email',
  path: '/verify-otp/$email',
  getParentRoute: () => rootRoute,
} as any)

const AuthedJoinTeamInviteCodeRoute = AuthedJoinTeamInviteCodeImport.update({
  id: '/join-team/$inviteCode',
  path: '/join-team/$inviteCode',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTTeamIdPProjectIdRoute = AuthedTTeamIdPProjectIdImport.update({
  id: '/t/$teamId/p/$projectId',
  path: '/t/$teamId/p/$projectId',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTTeamIdPProjectIdTeamSettingsRoute =
  AuthedTTeamIdPProjectIdTeamSettingsImport.update({
    id: '/team-settings',
    path: '/team-settings',
    getParentRoute: () => AuthedTTeamIdPProjectIdRoute,
  } as any)

const AuthedTTeamIdPProjectIdSettingsRoute =
  AuthedTTeamIdPProjectIdSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthedTTeamIdPProjectIdRoute,
  } as any)

const AuthedTTeamIdPProjectIdMembersRoute =
  AuthedTTeamIdPProjectIdMembersImport.update({
    id: '/members',
    path: '/members',
    getParentRoute: () => AuthedTTeamIdPProjectIdRoute,
  } as any)

const AuthedTTeamIdPProjectIdLogsRoute =
  AuthedTTeamIdPProjectIdLogsImport.update({
    id: '/logs',
    path: '/logs',
    getParentRoute: () => AuthedTTeamIdPProjectIdRoute,
  } as any)

const AuthedTTeamIdPProjectIdDomainsRoute =
  AuthedTTeamIdPProjectIdDomainsImport.update({
    id: '/domains',
    path: '/domains',
    getParentRoute: () => AuthedTTeamIdPProjectIdRoute,
  } as any)

const AuthedTTeamIdPProjectIdBillingRoute =
  AuthedTTeamIdPProjectIdBillingImport.update({
    id: '/billing',
    path: '/billing',
    getParentRoute: () => AuthedTTeamIdPProjectIdRoute,
  } as any)

const AuthedTTeamIdPProjectIdApiTokensRoute =
  AuthedTTeamIdPProjectIdApiTokensImport.update({
    id: '/api-tokens',
    path: '/api-tokens',
    getParentRoute: () => AuthedTTeamIdPProjectIdRoute,
  } as any)

const AuthedTTeamIdPProjectIdTemplatesIndexRoute =
  AuthedTTeamIdPProjectIdTemplatesIndexImport.update({
    id: '/templates/',
    path: '/templates/',
    getParentRoute: () => AuthedTTeamIdPProjectIdRoute,
  } as any)

const AuthedTTeamIdPProjectIdTemplatesNewRoute =
  AuthedTTeamIdPProjectIdTemplatesNewImport.update({
    id: '/templates/new',
    path: '/templates/new',
    getParentRoute: () => AuthedTTeamIdPProjectIdRoute,
  } as any)

const AuthedTTeamIdPProjectIdTemplatesSlugRoute =
  AuthedTTeamIdPProjectIdTemplatesSlugImport.update({
    id: '/templates/$slug',
    path: '/templates/$slug',
    getParentRoute: () => AuthedTTeamIdPProjectIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/verify-otp/$email': {
      id: '/verify-otp/$email'
      path: '/verify-otp/$email'
      fullPath: '/verify-otp/$email'
      preLoaderRoute: typeof VerifyOtpEmailImport
      parentRoute: typeof rootRoute
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/join-team/$inviteCode': {
      id: '/_authed/join-team/$inviteCode'
      path: '/join-team/$inviteCode'
      fullPath: '/join-team/$inviteCode'
      preLoaderRoute: typeof AuthedJoinTeamInviteCodeImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/t/$teamId/p/$projectId': {
      id: '/_authed/t/$teamId/p/$projectId'
      path: '/t/$teamId/p/$projectId'
      fullPath: '/t/$teamId/p/$projectId'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/t/$teamId/p/$projectId/api-tokens': {
      id: '/_authed/t/$teamId/p/$projectId/api-tokens'
      path: '/api-tokens'
      fullPath: '/t/$teamId/p/$projectId/api-tokens'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdApiTokensImport
      parentRoute: typeof AuthedTTeamIdPProjectIdImport
    }
    '/_authed/t/$teamId/p/$projectId/billing': {
      id: '/_authed/t/$teamId/p/$projectId/billing'
      path: '/billing'
      fullPath: '/t/$teamId/p/$projectId/billing'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdBillingImport
      parentRoute: typeof AuthedTTeamIdPProjectIdImport
    }
    '/_authed/t/$teamId/p/$projectId/domains': {
      id: '/_authed/t/$teamId/p/$projectId/domains'
      path: '/domains'
      fullPath: '/t/$teamId/p/$projectId/domains'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdDomainsImport
      parentRoute: typeof AuthedTTeamIdPProjectIdImport
    }
    '/_authed/t/$teamId/p/$projectId/logs': {
      id: '/_authed/t/$teamId/p/$projectId/logs'
      path: '/logs'
      fullPath: '/t/$teamId/p/$projectId/logs'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdLogsImport
      parentRoute: typeof AuthedTTeamIdPProjectIdImport
    }
    '/_authed/t/$teamId/p/$projectId/members': {
      id: '/_authed/t/$teamId/p/$projectId/members'
      path: '/members'
      fullPath: '/t/$teamId/p/$projectId/members'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdMembersImport
      parentRoute: typeof AuthedTTeamIdPProjectIdImport
    }
    '/_authed/t/$teamId/p/$projectId/settings': {
      id: '/_authed/t/$teamId/p/$projectId/settings'
      path: '/settings'
      fullPath: '/t/$teamId/p/$projectId/settings'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdSettingsImport
      parentRoute: typeof AuthedTTeamIdPProjectIdImport
    }
    '/_authed/t/$teamId/p/$projectId/team-settings': {
      id: '/_authed/t/$teamId/p/$projectId/team-settings'
      path: '/team-settings'
      fullPath: '/t/$teamId/p/$projectId/team-settings'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdTeamSettingsImport
      parentRoute: typeof AuthedTTeamIdPProjectIdImport
    }
    '/_authed/t/$teamId/p/$projectId/templates/$slug': {
      id: '/_authed/t/$teamId/p/$projectId/templates/$slug'
      path: '/templates/$slug'
      fullPath: '/t/$teamId/p/$projectId/templates/$slug'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdTemplatesSlugImport
      parentRoute: typeof AuthedTTeamIdPProjectIdImport
    }
    '/_authed/t/$teamId/p/$projectId/templates/new': {
      id: '/_authed/t/$teamId/p/$projectId/templates/new'
      path: '/templates/new'
      fullPath: '/t/$teamId/p/$projectId/templates/new'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdTemplatesNewImport
      parentRoute: typeof AuthedTTeamIdPProjectIdImport
    }
    '/_authed/t/$teamId/p/$projectId/templates/': {
      id: '/_authed/t/$teamId/p/$projectId/templates/'
      path: '/templates'
      fullPath: '/t/$teamId/p/$projectId/templates'
      preLoaderRoute: typeof AuthedTTeamIdPProjectIdTemplatesIndexImport
      parentRoute: typeof AuthedTTeamIdPProjectIdImport
    }
  }
}

// Create and export the route tree

interface AuthedTTeamIdPProjectIdRouteChildren {
  AuthedTTeamIdPProjectIdApiTokensRoute: typeof AuthedTTeamIdPProjectIdApiTokensRoute
  AuthedTTeamIdPProjectIdBillingRoute: typeof AuthedTTeamIdPProjectIdBillingRoute
  AuthedTTeamIdPProjectIdDomainsRoute: typeof AuthedTTeamIdPProjectIdDomainsRoute
  AuthedTTeamIdPProjectIdLogsRoute: typeof AuthedTTeamIdPProjectIdLogsRoute
  AuthedTTeamIdPProjectIdMembersRoute: typeof AuthedTTeamIdPProjectIdMembersRoute
  AuthedTTeamIdPProjectIdSettingsRoute: typeof AuthedTTeamIdPProjectIdSettingsRoute
  AuthedTTeamIdPProjectIdTeamSettingsRoute: typeof AuthedTTeamIdPProjectIdTeamSettingsRoute
  AuthedTTeamIdPProjectIdTemplatesSlugRoute: typeof AuthedTTeamIdPProjectIdTemplatesSlugRoute
  AuthedTTeamIdPProjectIdTemplatesNewRoute: typeof AuthedTTeamIdPProjectIdTemplatesNewRoute
  AuthedTTeamIdPProjectIdTemplatesIndexRoute: typeof AuthedTTeamIdPProjectIdTemplatesIndexRoute
}

const AuthedTTeamIdPProjectIdRouteChildren: AuthedTTeamIdPProjectIdRouteChildren =
  {
    AuthedTTeamIdPProjectIdApiTokensRoute:
      AuthedTTeamIdPProjectIdApiTokensRoute,
    AuthedTTeamIdPProjectIdBillingRoute: AuthedTTeamIdPProjectIdBillingRoute,
    AuthedTTeamIdPProjectIdDomainsRoute: AuthedTTeamIdPProjectIdDomainsRoute,
    AuthedTTeamIdPProjectIdLogsRoute: AuthedTTeamIdPProjectIdLogsRoute,
    AuthedTTeamIdPProjectIdMembersRoute: AuthedTTeamIdPProjectIdMembersRoute,
    AuthedTTeamIdPProjectIdSettingsRoute: AuthedTTeamIdPProjectIdSettingsRoute,
    AuthedTTeamIdPProjectIdTeamSettingsRoute:
      AuthedTTeamIdPProjectIdTeamSettingsRoute,
    AuthedTTeamIdPProjectIdTemplatesSlugRoute:
      AuthedTTeamIdPProjectIdTemplatesSlugRoute,
    AuthedTTeamIdPProjectIdTemplatesNewRoute:
      AuthedTTeamIdPProjectIdTemplatesNewRoute,
    AuthedTTeamIdPProjectIdTemplatesIndexRoute:
      AuthedTTeamIdPProjectIdTemplatesIndexRoute,
  }

const AuthedTTeamIdPProjectIdRouteWithChildren =
  AuthedTTeamIdPProjectIdRoute._addFileChildren(
    AuthedTTeamIdPProjectIdRouteChildren,
  )

interface AuthedRouteChildren {
  AuthedIndexRoute: typeof AuthedIndexRoute
  AuthedJoinTeamInviteCodeRoute: typeof AuthedJoinTeamInviteCodeRoute
  AuthedTTeamIdPProjectIdRoute: typeof AuthedTTeamIdPProjectIdRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedIndexRoute: AuthedIndexRoute,
  AuthedJoinTeamInviteCodeRoute: AuthedJoinTeamInviteCodeRoute,
  AuthedTTeamIdPProjectIdRoute: AuthedTTeamIdPProjectIdRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/verify-otp/$email': typeof VerifyOtpEmailRoute
  '/': typeof AuthedIndexRoute
  '/join-team/$inviteCode': typeof AuthedJoinTeamInviteCodeRoute
  '/t/$teamId/p/$projectId': typeof AuthedTTeamIdPProjectIdRouteWithChildren
  '/t/$teamId/p/$projectId/api-tokens': typeof AuthedTTeamIdPProjectIdApiTokensRoute
  '/t/$teamId/p/$projectId/billing': typeof AuthedTTeamIdPProjectIdBillingRoute
  '/t/$teamId/p/$projectId/domains': typeof AuthedTTeamIdPProjectIdDomainsRoute
  '/t/$teamId/p/$projectId/logs': typeof AuthedTTeamIdPProjectIdLogsRoute
  '/t/$teamId/p/$projectId/members': typeof AuthedTTeamIdPProjectIdMembersRoute
  '/t/$teamId/p/$projectId/settings': typeof AuthedTTeamIdPProjectIdSettingsRoute
  '/t/$teamId/p/$projectId/team-settings': typeof AuthedTTeamIdPProjectIdTeamSettingsRoute
  '/t/$teamId/p/$projectId/templates/$slug': typeof AuthedTTeamIdPProjectIdTemplatesSlugRoute
  '/t/$teamId/p/$projectId/templates/new': typeof AuthedTTeamIdPProjectIdTemplatesNewRoute
  '/t/$teamId/p/$projectId/templates': typeof AuthedTTeamIdPProjectIdTemplatesIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/verify-otp/$email': typeof VerifyOtpEmailRoute
  '/': typeof AuthedIndexRoute
  '/join-team/$inviteCode': typeof AuthedJoinTeamInviteCodeRoute
  '/t/$teamId/p/$projectId': typeof AuthedTTeamIdPProjectIdRouteWithChildren
  '/t/$teamId/p/$projectId/api-tokens': typeof AuthedTTeamIdPProjectIdApiTokensRoute
  '/t/$teamId/p/$projectId/billing': typeof AuthedTTeamIdPProjectIdBillingRoute
  '/t/$teamId/p/$projectId/domains': typeof AuthedTTeamIdPProjectIdDomainsRoute
  '/t/$teamId/p/$projectId/logs': typeof AuthedTTeamIdPProjectIdLogsRoute
  '/t/$teamId/p/$projectId/members': typeof AuthedTTeamIdPProjectIdMembersRoute
  '/t/$teamId/p/$projectId/settings': typeof AuthedTTeamIdPProjectIdSettingsRoute
  '/t/$teamId/p/$projectId/team-settings': typeof AuthedTTeamIdPProjectIdTeamSettingsRoute
  '/t/$teamId/p/$projectId/templates/$slug': typeof AuthedTTeamIdPProjectIdTemplatesSlugRoute
  '/t/$teamId/p/$projectId/templates/new': typeof AuthedTTeamIdPProjectIdTemplatesNewRoute
  '/t/$teamId/p/$projectId/templates': typeof AuthedTTeamIdPProjectIdTemplatesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/verify-otp/$email': typeof VerifyOtpEmailRoute
  '/_authed/': typeof AuthedIndexRoute
  '/_authed/join-team/$inviteCode': typeof AuthedJoinTeamInviteCodeRoute
  '/_authed/t/$teamId/p/$projectId': typeof AuthedTTeamIdPProjectIdRouteWithChildren
  '/_authed/t/$teamId/p/$projectId/api-tokens': typeof AuthedTTeamIdPProjectIdApiTokensRoute
  '/_authed/t/$teamId/p/$projectId/billing': typeof AuthedTTeamIdPProjectIdBillingRoute
  '/_authed/t/$teamId/p/$projectId/domains': typeof AuthedTTeamIdPProjectIdDomainsRoute
  '/_authed/t/$teamId/p/$projectId/logs': typeof AuthedTTeamIdPProjectIdLogsRoute
  '/_authed/t/$teamId/p/$projectId/members': typeof AuthedTTeamIdPProjectIdMembersRoute
  '/_authed/t/$teamId/p/$projectId/settings': typeof AuthedTTeamIdPProjectIdSettingsRoute
  '/_authed/t/$teamId/p/$projectId/team-settings': typeof AuthedTTeamIdPProjectIdTeamSettingsRoute
  '/_authed/t/$teamId/p/$projectId/templates/$slug': typeof AuthedTTeamIdPProjectIdTemplatesSlugRoute
  '/_authed/t/$teamId/p/$projectId/templates/new': typeof AuthedTTeamIdPProjectIdTemplatesNewRoute
  '/_authed/t/$teamId/p/$projectId/templates/': typeof AuthedTTeamIdPProjectIdTemplatesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/verify-otp/$email'
    | '/'
    | '/join-team/$inviteCode'
    | '/t/$teamId/p/$projectId'
    | '/t/$teamId/p/$projectId/api-tokens'
    | '/t/$teamId/p/$projectId/billing'
    | '/t/$teamId/p/$projectId/domains'
    | '/t/$teamId/p/$projectId/logs'
    | '/t/$teamId/p/$projectId/members'
    | '/t/$teamId/p/$projectId/settings'
    | '/t/$teamId/p/$projectId/team-settings'
    | '/t/$teamId/p/$projectId/templates/$slug'
    | '/t/$teamId/p/$projectId/templates/new'
    | '/t/$teamId/p/$projectId/templates'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/verify-otp/$email'
    | '/'
    | '/join-team/$inviteCode'
    | '/t/$teamId/p/$projectId'
    | '/t/$teamId/p/$projectId/api-tokens'
    | '/t/$teamId/p/$projectId/billing'
    | '/t/$teamId/p/$projectId/domains'
    | '/t/$teamId/p/$projectId/logs'
    | '/t/$teamId/p/$projectId/members'
    | '/t/$teamId/p/$projectId/settings'
    | '/t/$teamId/p/$projectId/team-settings'
    | '/t/$teamId/p/$projectId/templates/$slug'
    | '/t/$teamId/p/$projectId/templates/new'
    | '/t/$teamId/p/$projectId/templates'
  id:
    | '__root__'
    | '/_authed'
    | '/login'
    | '/verify-otp/$email'
    | '/_authed/'
    | '/_authed/join-team/$inviteCode'
    | '/_authed/t/$teamId/p/$projectId'
    | '/_authed/t/$teamId/p/$projectId/api-tokens'
    | '/_authed/t/$teamId/p/$projectId/billing'
    | '/_authed/t/$teamId/p/$projectId/domains'
    | '/_authed/t/$teamId/p/$projectId/logs'
    | '/_authed/t/$teamId/p/$projectId/members'
    | '/_authed/t/$teamId/p/$projectId/settings'
    | '/_authed/t/$teamId/p/$projectId/team-settings'
    | '/_authed/t/$teamId/p/$projectId/templates/$slug'
    | '/_authed/t/$teamId/p/$projectId/templates/new'
    | '/_authed/t/$teamId/p/$projectId/templates/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  VerifyOtpEmailRoute: typeof VerifyOtpEmailRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  VerifyOtpEmailRoute: VerifyOtpEmailRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/login",
        "/verify-otp/$email"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/",
        "/_authed/join-team/$inviteCode",
        "/_authed/t/$teamId/p/$projectId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/verify-otp/$email": {
      "filePath": "verify-otp.$email.tsx"
    },
    "/_authed/": {
      "filePath": "_authed/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/join-team/$inviteCode": {
      "filePath": "_authed/join-team.$inviteCode.tsx",
      "parent": "/_authed"
    },
    "/_authed/t/$teamId/p/$projectId": {
      "filePath": "_authed/t.$teamId.p.$projectId.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/t/$teamId/p/$projectId/api-tokens",
        "/_authed/t/$teamId/p/$projectId/billing",
        "/_authed/t/$teamId/p/$projectId/domains",
        "/_authed/t/$teamId/p/$projectId/logs",
        "/_authed/t/$teamId/p/$projectId/members",
        "/_authed/t/$teamId/p/$projectId/settings",
        "/_authed/t/$teamId/p/$projectId/team-settings",
        "/_authed/t/$teamId/p/$projectId/templates/$slug",
        "/_authed/t/$teamId/p/$projectId/templates/new",
        "/_authed/t/$teamId/p/$projectId/templates/"
      ]
    },
    "/_authed/t/$teamId/p/$projectId/api-tokens": {
      "filePath": "_authed/t.$teamId.p.$projectId.api-tokens.tsx",
      "parent": "/_authed/t/$teamId/p/$projectId"
    },
    "/_authed/t/$teamId/p/$projectId/billing": {
      "filePath": "_authed/t.$teamId.p.$projectId.billing.tsx",
      "parent": "/_authed/t/$teamId/p/$projectId"
    },
    "/_authed/t/$teamId/p/$projectId/domains": {
      "filePath": "_authed/t.$teamId.p.$projectId.domains.tsx",
      "parent": "/_authed/t/$teamId/p/$projectId"
    },
    "/_authed/t/$teamId/p/$projectId/logs": {
      "filePath": "_authed/t.$teamId.p.$projectId.logs.tsx",
      "parent": "/_authed/t/$teamId/p/$projectId"
    },
    "/_authed/t/$teamId/p/$projectId/members": {
      "filePath": "_authed/t.$teamId.p.$projectId.members.tsx",
      "parent": "/_authed/t/$teamId/p/$projectId"
    },
    "/_authed/t/$teamId/p/$projectId/settings": {
      "filePath": "_authed/t.$teamId.p.$projectId.settings.tsx",
      "parent": "/_authed/t/$teamId/p/$projectId"
    },
    "/_authed/t/$teamId/p/$projectId/team-settings": {
      "filePath": "_authed/t.$teamId.p.$projectId.team-settings.tsx",
      "parent": "/_authed/t/$teamId/p/$projectId"
    },
    "/_authed/t/$teamId/p/$projectId/templates/$slug": {
      "filePath": "_authed/t.$teamId.p.$projectId.templates.$slug.tsx",
      "parent": "/_authed/t/$teamId/p/$projectId"
    },
    "/_authed/t/$teamId/p/$projectId/templates/new": {
      "filePath": "_authed/t.$teamId.p.$projectId.templates.new.tsx",
      "parent": "/_authed/t/$teamId/p/$projectId"
    },
    "/_authed/t/$teamId/p/$projectId/templates/": {
      "filePath": "_authed/t.$teamId.p.$projectId.templates.index.tsx",
      "parent": "/_authed/t/$teamId/p/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
